{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"colab":{"provenance":[{"file_id":"https://storage.googleapis.com/kaggle-colab-exported-notebooks/very-basic-cifar-10-data-cnn-d6c40b8f-4e72-4726-9e96-69bbe2c39c65.ipynb?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com/20240327/auto/storage/goog4_request&X-Goog-Date=20240327T005324Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=host&X-Goog-Signature=8ac2d35255cd9472a46921b7a970a3ed7b636884ef4cf29a9d7f9f529f3a72eff06a80c4a91300283a0f8645b86c58f8cc66caa9e1e6d4f9f3a37acfea7acc7266790c3f11b5b5134d76eee9a416283ec25d738bbf4aa8a6858cbcc729eb83923a20f99033017a104502e857b26126482c35dd6c82f78e1d1fe4deda21e5d39fb714dff087e0dfd03b24a9ec3be71f3d6b82caba803837c2e814c5e9fe8e5aeb0ac5284061e775dea5130f9d3a6ef9606ead814e28c212cf84fb22963743ca46c266ffb698e568c92a4ae951de5fcb2ec3194319d414caccda0dcfdaf082384f648cda21c820754a790fc43679d41104f908886fe40c4befaaf80c6a253f739e","timestamp":1711500817568}],"toc_visible":true}},"nbformat_minor":0,"nbformat":4,"cells":[{"cell_type":"markdown","source":["<h1 style=\"font-size:80px;color:#6166B3;text-align:center\"><strong>Very Basic</strong> <strong style=\"color:black\">Deep Learning on CIFAR-10 Data CNN</strong></h1>"],"metadata":{"id":"edLP1GjKZdM0"}},{"cell_type":"markdown","source":["<h1 style=\"font-size:50px;color:#6166B3\"><strong>About </strong><strong style=\"color:black\">CIFAR-10 Data:</strong></h1>\n","\n","<p style=\"font-size:120%\">The CIFAR-10 dataset consists of 60000 32x32 colour images in 10 classes, with 6000 images per class. There are 50000 training images and 10000 test images.</p>\n","\n","![image.png](attachment:dc18722a-7377-434d-b32a-22158cb4aaa7.png)\n","\n","<p style=\"font-size:120%\">The CIFAR-10 and CIFAR-100 are labeled subsets of the 80 million tiny images dataset. They were collected by Alex Krizhevsky, Vinod Nair, and Geoffrey Hinton.</p>\n","\n","<p style=\"font-size:120%\"><mark>The dataset is divided into five training batches and one test batch, each with 10000 images.</mark> The test batch contains exactly 1000 randomly-selected images from each class. The training batches contain the remaining images in random order, but some training batches may contain more images from one class than another. Between them, the training batches contain exactly 5000 images from each class.</p>\n","\n","<img src=\"https://miro.medium.com/max/1400/0*Ra55_QqeYjDWH0ZR.gif\" style=\"width:80%\"></img>\n","\n","<p style=\"font-size:120%\">We are going to perform a Classification task as shown in the GIF using CNN.</p>"],"metadata":{"id":"2YVFl890ZdM5"}},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"X2Dirh21cBRy","executionInfo":{"status":"ok","timestamp":1711560313232,"user_tz":-420,"elapsed":20014,"user":{"displayName":"Hoàng Phúc Nguyễn Văn","userId":"03015161690539755125"}},"outputId":"62dc678e-37f3-4cfc-badf-e4e14b359bbc"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["import os\n","os.chdir(\"/content/drive/MyDrive/5_AIADVANCE/NN-Without-Frameworks/nn_without_frameworks/\")"],"metadata":{"id":"sqYNKUWrb-y9","executionInfo":{"status":"ok","timestamp":1711560313831,"user_tz":-420,"elapsed":605,"user":{"displayName":"Hoàng Phúc Nguyễn Văn","userId":"03015161690539755125"}}},"execution_count":3,"outputs":[]},{"cell_type":"markdown","source":["<h1 style=\"font-size:50px;color:#6166B3\"><strong>Importing </strong><strong style=\"color:black\">Necessary Libraries:</strong></h1>"],"metadata":{"id":"xi73ofKPZdM7"}},{"cell_type":"code","source":["from __future__ import print_function\n","import tensorflow as tf\n","from tensorflow.keras.datasets import cifar10\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense, Dropout, Activation, Flatten\n","from tensorflow.keras.layers import BatchNormalization\n","from tensorflow.keras.layers import Conv2D, MaxPooling2D\n","from tensorflow.keras.regularizers import l2\n","import numpy as np\n","import os\n","import matplotlib.pyplot as plt\n","plt.rcParams['axes.unicode_minus'] = False\n","plt.style.use('fivethirtyeight')\n","%matplotlib inline\n","\n","# Defining the parameters\n","batch_size = 32\n","num_classes = 10\n","epochs = 50"],"metadata":{"execution":{"iopub.status.busy":"2023-01-07T13:36:02.056186Z","iopub.execute_input":"2023-01-07T13:36:02.056968Z","iopub.status.idle":"2023-01-07T13:36:06.949066Z","shell.execute_reply.started":"2023-01-07T13:36:02.056813Z","shell.execute_reply":"2023-01-07T13:36:06.948277Z"},"trusted":true,"id":"xk0zJX2nZdM9","executionInfo":{"status":"ok","timestamp":1711560318641,"user_tz":-420,"elapsed":4815,"user":{"displayName":"Hoàng Phúc Nguyễn Văn","userId":"03015161690539755125"}}},"execution_count":4,"outputs":[]},{"cell_type":"markdown","source":["<h1 style=\"font-size:50px;color:#6166B3\"><strong>Importing </strong><strong style=\"color:black\">CIFAR-10 Data:</strong></h1>"],"metadata":{"id":"89C4a-VYZdM_"}},{"cell_type":"code","source":["# Splitting the data between train and test\n","import ssl\n","ssl._create_default_https_context = ssl._create_unverified_context\n","\n","(x_train, y_train), (x_test, y_test) = cifar10.load_data()\n","print('x_train shape:', x_train.shape)\n","print(x_train.shape[0], 'train samples')\n","print(x_test.shape[0], 'test samples')"],"metadata":{"execution":{"iopub.status.busy":"2023-01-07T13:36:06.950662Z","iopub.execute_input":"2023-01-07T13:36:06.950924Z","iopub.status.idle":"2023-01-07T13:36:21.500105Z","shell.execute_reply.started":"2023-01-07T13:36:06.950888Z","shell.execute_reply":"2023-01-07T13:36:21.497912Z"},"trusted":true,"id":"flV92LS-ZdNA","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1711560349317,"user_tz":-420,"elapsed":7102,"user":{"displayName":"Hoàng Phúc Nguyễn Văn","userId":"03015161690539755125"}},"outputId":"0a6bd181-27d3-4bdd-fcd0-b9b5b498f729"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz\n","170498071/170498071 [==============================] - 2s 0us/step\n","x_train shape: (50000, 32, 32, 3)\n","50000 train samples\n","10000 test samples\n"]}]},{"cell_type":"markdown","source":["<h1 style=\"font-size:50px;color:#6166B3\"><strong>Visualizing </strong><strong style=\"color:black\">CIFAR-10 Data:</strong></h1>"],"metadata":{"id":"3SFbeFRUZdNA"}},{"cell_type":"code","source":["# plotting some random 10 images\n","\n","class_names = ['airplane','automobile','bird','cat','deer',\n","               'dog','frog','horse','ship','truck']\n","\n","fig = plt.figure(figsize=(10,5))\n","for i in range(num_classes):\n","    ax = fig.add_subplot(2, 5, 1 + i, xticks=[], yticks=[])\n","    idx = np.where(y_train[:]==i)[0]\n","    features_idx = x_train[idx,::]\n","    img_num = np.random.randint(features_idx.shape[0])\n","    im = (features_idx[img_num,::])\n","    ax.set_title(class_names[i])\n","    plt.imshow(im)\n","plt.show()"],"metadata":{"execution":{"iopub.status.busy":"2023-01-07T13:36:21.501367Z","iopub.execute_input":"2023-01-07T13:36:21.501621Z","iopub.status.idle":"2023-01-07T13:36:21.885611Z","shell.execute_reply.started":"2023-01-07T13:36:21.501587Z","shell.execute_reply":"2023-01-07T13:36:21.884886Z"},"trusted":true,"id":"Y79rZA0vZdNB","colab":{"base_uri":"https://localhost:8080/","height":438},"executionInfo":{"status":"ok","timestamp":1711560350316,"user_tz":-420,"elapsed":1002,"user":{"displayName":"Hoàng Phúc Nguyễn Văn","userId":"03015161690539755125"}},"outputId":"84c65d9d-b536-4a4a-9cd6-158a7622b434"},"execution_count":6,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x500 with 10 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["<h1 style=\"font-size:50px;color:#6166B3\"><strong>Pre-Processing </strong><strong style=\"color:black\">The Data:</strong></h1>"],"metadata":{"id":"LUGehtaKZdNB"}},{"cell_type":"code","source":["# Convert class vectors to binary class matrices.\n","y_train = tf.keras.utils.to_categorical(y_train, num_classes)\n","y_test = tf.keras.utils.to_categorical(y_test, num_classes)"],"metadata":{"execution":{"iopub.status.busy":"2023-01-07T13:36:21.88669Z","iopub.execute_input":"2023-01-07T13:36:21.888087Z","iopub.status.idle":"2023-01-07T13:36:21.893353Z","shell.execute_reply.started":"2023-01-07T13:36:21.888049Z","shell.execute_reply":"2023-01-07T13:36:21.892649Z"},"trusted":true,"id":"SgF59iNSZdNC","executionInfo":{"status":"ok","timestamp":1711560351406,"user_tz":-420,"elapsed":10,"user":{"displayName":"Hoàng Phúc Nguyễn Văn","userId":"03015161690539755125"}}},"execution_count":7,"outputs":[]},{"cell_type":"markdown","source":["<h1 style=\"font-size:50px;color:#6166B3\"><strong>Designing </strong><strong style=\"color:black\">The Convolution Neural Network:</strong></h1>"],"metadata":{"id":"DK3xkpZ5ZdNC"}},{"cell_type":"code","source":["import numpy_nn as nn"],"metadata":{"id":"TOLX0xRXbysb","executionInfo":{"status":"ok","timestamp":1711560370247,"user_tz":-420,"elapsed":2470,"user":{"displayName":"Hoàng Phúc Nguyễn Văn","userId":"03015161690539755125"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["class F:\n","\n","    def relu(z):\n","        return np.maximum(0, z)"],"metadata":{"id":"bmf6-8zGdI1u","executionInfo":{"status":"ok","timestamp":1711560382464,"user_tz":-420,"elapsed":434,"user":{"displayName":"Hoàng Phúc Nguyễn Văn","userId":"03015161690539755125"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["F.relu([-5, 5])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bb-nESDQd_mT","executionInfo":{"status":"ok","timestamp":1711560383395,"user_tz":-420,"elapsed":2,"user":{"displayName":"Hoàng Phúc Nguyễn Văn","userId":"03015161690539755125"}},"outputId":"59e5159c-f5e7-4ef7-fc67-a97ef9350f9c"},"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 5])"]},"metadata":{},"execution_count":10}]},{"cell_type":"markdown","source":["## model"],"metadata":{"id":"T5dPQMPcH8ZC"}},{"cell_type":"code","source":["# import torch\n","# import torch.nn as nn\n","# import torch.nn.functional as F\n","\n","class CNN(nn.Module):\n","    def __init__(self,in_channels, num_classes):\n","        super().__init__()\n","\n","        self.conv1 = nn.layers.Conv2d(in_features=in_channels, out_features=64, kernel_size=3, padding=1)\n","        self.relu1 = nn.layers.ReLU()\n","        self.conv2 = nn.layers.Conv2d(64, 64, kernel_size=3, padding=1)\n","        self.relu2 = nn.layers.ReLU()\n","        # self.maxpool1 = nn.layers.MaxPool2d(kernel_size=2)\n","        self.maxpool1 = nn.layers.Pool2d(mode='max', kernel_size=2, stride=2)\n","        self.dropout1 = nn.layers.Dropout(0.25)\n","\n","        self.conv3 = nn.layers.Conv2d(64, 128, kernel_size=3, padding=1)\n","        self.relu3 = nn.layers.ReLU()\n","        self.conv4 = nn.layers.Conv2d(128, 128, kernel_size=3, padding=1)\n","        self.relu4 = nn.layers.ReLU()\n","        self.maxpool2 = nn.layers.Pool2d(mode='max', kernel_size=2, stride=2)\n","        self.dropout2 = nn.layers.Dropout(0.25)\n","\n","        self.flatten = nn.layers.Flatten()\n","\n","        self.fc1 = nn.layers.Dense(128*8*8, 512)\n","        self.relu5 = nn.layers.ReLU()\n","        self.dropout3 = nn.layers.Dropout(0.5)\n","        self.fc2 = nn.layers.Dense(512, num_classes)\n","\n","    def forward(self, x, eval=False):\n","        # forward pass\n","        x = self.relu1(self.conv1(x))\n","        x = self.relu2(self.conv2(x))\n","        x = self.maxpool1(x)\n","        x = self.dropout1(x)\n","\n","        x = self.relu3(self.conv3(x))\n","        x = self.relu4(self.conv4(x))\n","        x = self.maxpool2(x)\n","        x = self.dropout2(x)\n","\n","        x = self.flatten(x)\n","        x = self.relu5(self.fc1(x))\n","        x = self.dropout3(x)\n","        x = self.fc2(x)\n","\n","        return x\n"],"metadata":{"id":"dK6iijt1IYnO","executionInfo":{"status":"ok","timestamp":1711560536290,"user_tz":-420,"elapsed":322,"user":{"displayName":"Hoàng Phúc Nguyễn Văn","userId":"03015161690539755125"}}},"execution_count":20,"outputs":[]},{"cell_type":"code","source":["# # import torch\n","# # import torch.nn as nn\n","# # import torch.nn.functional as F\n","\n","# class CNN(nn.Module):\n","#     def __init__(self,in_channels, num_classes):\n","#         super().__init__()\n","\n","#         self.conv1 = nn.layers.Conv2d(in_features=in_channels, out_features=64, kernel_size=3, padding=1)\n","#         self.bn1 = nn.layers.BatchNorm2d(64)\n","#         self.relu1 = nn.layers.ReLU()\n","#         self.conv2 = nn.layers.Conv2d(64, 64, kernel_size=3, padding=1)\n","#         self.bn2 = nn.layers.BatchNorm2d(64)\n","#         self.relu2 = nn.layers.ReLU()\n","#         # self.maxpool1 = nn.layers.MaxPool2d(kernel_size=2)\n","#         self.maxpool1 = nn.layers.Pool2d(mode = 'max', kernel_size=2, stride=2)\n","#         self.dropout1 = nn.layers.Dropout(0.25)\n","\n","#         self.conv3 = nn.layers.Conv2d(64, 128, kernel_size=3, padding=1)\n","#         self.bn3 = nn.layers.BatchNorm2d(128)\n","#         self.relu3 = nn.layers.ReLU()\n","#         self.conv4 = nn.layers.Conv2d(128, 128, kernel_size=3, padding=1)\n","#         self.bn4 = nn.layers.BatchNorm2d(128)\n","#         self.relu4 = nn.layers.ReLU()\n","#         self.maxpool2 = nn.layers.Pool2d(mode = 'max', kernel_size=2, stride=2)\n","#         self.dropout2 = nn.layers.Dropout(0.25)\n","\n","#         self.flatten = nn.layers.Flatten()\n","\n","#         self.fc1 = nn.layers.Dense(128*8*8, 512)\n","#         self.relu5 = nn.layers.ReLU()\n","#         self.dropout3 = nn.layers.Dropout(0.5)\n","#         self.fc2 = nn.layers.Dense(512, num_classes)\n","\n","#     def forward(self, x, eval=False):\n","#         # forward pass\n","#         x = self.relu1(self.bn1(self.conv1(x)))\n","#         x = self.relu2(self.bn2(self.conv2(x)))\n","#         x = self.maxpool1(x)\n","#         x = self.dropout1(x)\n","\n","#         x = self.relu3(self.bn3(self.conv3(x)))\n","#         x = self.relu4(self.bn4(self.conv4(x)))\n","#         x = self.maxpool2(x)\n","#         x = self.dropout2(x)\n","#         print(x.shape)\n","#         # x = x.view(-1, 128*32*32)\n","#         # x = x.reshape(x.shape[0], -1)\n","#         # x = x.view(x.shape[0], -1)\n","\n","#         x = self.flatten(x)\n","#         x = self.relu5(self.fc1(x))\n","#         x = self.dropout3(x)\n","#         x = self.fc2(x)\n","\n","#         return x"],"metadata":{"id":"5sSPe8PDbsqc","executionInfo":{"status":"ok","timestamp":1711560394469,"user_tz":-420,"elapsed":340,"user":{"displayName":"Hoàng Phúc Nguyễn Văn","userId":"03015161690539755125"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["model = CNN(in_channels=3, num_classes=10)"],"metadata":{"id":"ogd4YvA6mznY","executionInfo":{"status":"ok","timestamp":1711560542939,"user_tz":-420,"elapsed":490,"user":{"displayName":"Hoàng Phúc Nguyễn Văn","userId":"03015161690539755125"}}},"execution_count":21,"outputs":[]},{"cell_type":"code","source":["# # Building the CNN Model_new (Hidden Output)\n","\n","# model_new = Sequential()\n","# model_new.add(Conv2D(64, (3, 3), padding='same',\n","#                  input_shape=x_train.shape[1:]))\n","# model_new.add(Activation('relu'))\n","# model_new.add(BatchNormalization())\n","# model_new.add(Conv2D(64, (3, 3)))\n","# model_new.add(Activation('relu'))\n","# model_new.add(BatchNormalization())\n","# model_new.add(MaxPooling2D(pool_size=(2, 2)))\n","# model_new.add(Dropout(0.25))\n","\n","# model_new.add(Conv2D(128, (3, 3), padding='same'))\n","# model_new.add(Activation('relu'))\n","# model_new.add(BatchNormalization())\n","# model_new.add(Conv2D(128, (3, 3)))\n","# model_new.add(Activation('relu'))\n","# model_new.add(BatchNormalization())\n","# model_new.add(MaxPooling2D(pool_size=(2, 2)))\n","# model_new.add(Dropout(0.25))\n","\n","# model_new.add(Flatten())\n","# model_new.add(Dense(512,kernel_regularizer=l2(0.01)))\n","# model_new.add(Activation('relu'))\n","# model_new.add(Dropout(0.5))\n","# model_new.add(Dense(num_classes))\n","# model_new.add(Activation('softmax'))"],"metadata":{"_kg_hide-output":true,"execution":{"iopub.status.busy":"2023-01-07T13:36:21.895637Z","iopub.execute_input":"2023-01-07T13:36:21.896146Z","iopub.status.idle":"2023-01-07T13:36:24.430398Z","shell.execute_reply.started":"2023-01-07T13:36:21.896109Z","shell.execute_reply":"2023-01-07T13:36:24.429513Z"},"trusted":true,"id":"p2IAjJvZZdND","executionInfo":{"status":"ok","timestamp":1711560410160,"user_tz":-420,"elapsed":1325,"user":{"displayName":"Hoàng Phúc Nguyễn Văn","userId":"03015161690539755125"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["# model_new.summary()"],"metadata":{"id":"9U6rj4-MFCL0"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["<h1 style=\"font-size:50px;color:#6166B3\"><strong>Visualizing </strong><strong style=\"color:black\">The Convolution Neural Network:</strong></h1>"],"metadata":{"id":"wneTNUW6ZdND"}},{"cell_type":"code","source":["# # Installing Visual Keras\n","\n","# !pip install visualkeras"],"metadata":{"execution":{"iopub.status.busy":"2023-01-07T13:36:52.006089Z","iopub.execute_input":"2023-01-07T13:36:52.006369Z","iopub.status.idle":"2023-01-07T13:37:03.820952Z","shell.execute_reply.started":"2023-01-07T13:36:52.006339Z","shell.execute_reply":"2023-01-07T13:37:03.820099Z"},"_kg_hide-output":true,"trusted":true,"id":"1n9McsrUZdND"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# # Visualizing our model (Hidden Input)\n","# import visualkeras\n","# visualkeras.layered_view(model, scale_xy=10, legend=True)"],"metadata":{"_kg_hide-input":true,"execution":{"iopub.status.busy":"2023-01-07T13:37:09.821782Z","iopub.execute_input":"2023-01-07T13:37:09.822086Z","iopub.status.idle":"2023-01-07T13:37:09.92457Z","shell.execute_reply.started":"2023-01-07T13:37:09.822052Z","shell.execute_reply":"2023-01-07T13:37:09.92366Z"},"trusted":true,"id":"-c44gdD9ZdNE"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["<h1 style=\"font-size:50px;color:#6166B3\"><strong>Summary Of </strong><strong style=\"color:black\">The Convolution Neural Network:</strong></h1>"],"metadata":{"id":"ccJ-isEhZdNE"}},{"cell_type":"code","source":["# summary of the model (Hidden Input)\n","model.build(np.array(np.ones((1, 32, 32, 3))))\n","print(model.summary())"],"metadata":{"_kg_hide-input":true,"execution":{"iopub.status.busy":"2023-01-07T13:37:13.432347Z","iopub.execute_input":"2023-01-07T13:37:13.432621Z","iopub.status.idle":"2023-01-07T13:37:13.447302Z","shell.execute_reply.started":"2023-01-07T13:37:13.432591Z","shell.execute_reply":"2023-01-07T13:37:13.44654Z"},"trusted":true,"id":"lqvYYrGJZdNE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1711560545453,"user_tz":-420,"elapsed":332,"user":{"displayName":"Hoàng Phúc Nguyễn Văn","userId":"03015161690539755125"}},"outputId":"fd01edfd-e4a7-4633-981e-c1dc02a9bfd6"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Model Summary:\n","+-------------+------------------+----------+\n","| Layer       | Output shape     |   Param# |\n","+=============+==================+==========+\n","| Input       | (-1, 27)         |        0 |\n","+-------------+------------------+----------+\n","| Conv2d[0]   | (1, 32, 32, 64)  |     1792 |\n","+-------------+------------------+----------+\n","| Conv2d[1]   | (1, 32, 32, 64)  |    36928 |\n","+-------------+------------------+----------+\n","| Pool2d[2]   | (1, 16, 16, 64)  |        0 |\n","+-------------+------------------+----------+\n","| Dropout[3]  | (-1, 64)         |        0 |\n","+-------------+------------------+----------+\n","| Conv2d[4]   | (1, 16, 16, 128) |    73856 |\n","+-------------+------------------+----------+\n","| Conv2d[5]   | (1, 16, 16, 128) |   147584 |\n","+-------------+------------------+----------+\n","| Pool2d[6]   | (1, 8, 8, 128)   |        0 |\n","+-------------+------------------+----------+\n","| Dropout[7]  | (-1, 128)        |        0 |\n","+-------------+------------------+----------+\n","| Flatten[8]  | (-1, 8192)       |        0 |\n","+-------------+------------------+----------+\n","| Dense[9]    | (-1, 512)        |  4194816 |\n","+-------------+------------------+----------+\n","| Dropout[10] | (-1, 512)        |        0 |\n","+-------------+------------------+----------+\n","| Dense[11]   | (-1, 10)         |     5130 |\n","+-------------+------------------+----------+\n","total trainable parameters: 4460106\n","\n","None\n"]}]},{"cell_type":"markdown","source":["<h1 style=\"font-size:50px;color:#6166B3\"><strong>Compiling & Training </strong><strong style=\"color:black\">The Model:</strong></h1>"],"metadata":{"id":"lVRDlRqUZdNE"}},{"cell_type":"code","source":["# # compile (Hidden Output)\n","# model.compile(loss='categorical_crossentropy',\n","#               optimizer='sgd',\n","#               metrics=['accuracy'])\n","\n","x_train = x_train.astype('float32')\n","x_test = x_test.astype('float32')\n","\n","# Normalizing the input image\n","x_train /= 255\n","x_test /= 255"],"metadata":{"_kg_hide-output":true,"execution":{"iopub.status.busy":"2023-01-07T13:37:17.907967Z","iopub.execute_input":"2023-01-07T13:37:17.908687Z","iopub.status.idle":"2023-01-07T13:45:50.050909Z","shell.execute_reply.started":"2023-01-07T13:37:17.908633Z","shell.execute_reply":"2023-01-07T13:45:50.050162Z"},"trusted":true,"id":"MkJ53rRgZdNF","executionInfo":{"status":"ok","timestamp":1711560553324,"user_tz":-420,"elapsed":794,"user":{"displayName":"Hoàng Phúc Nguyễn Văn","userId":"03015161690539755125"}}},"execution_count":23,"outputs":[]},{"cell_type":"code","source":["print(len(x_test))\n","print(x_test[0].shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rv4KjLRRpvuI","executionInfo":{"status":"ok","timestamp":1711560553649,"user_tz":-420,"elapsed":3,"user":{"displayName":"Hoàng Phúc Nguyễn Văn","userId":"03015161690539755125"}},"outputId":"8245d057-241d-4e30-b8fa-6fe897f08d65"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["10000\n","(32, 32, 3)\n"]}]},{"cell_type":"code","source":["# epochs=50\n","\n","# # Training the model\n","# history = model.fit(x_train, y_train,\n","#               batch_size=batch_size,\n","#               epochs=epochs,\n","#               validation_data=(x_test, y_test),\n","#               shuffle=True)"],"metadata":{"id":"7DEVaVgiwZ6G"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from abc import ABC\n","import numpy as np\n","\n","\n","def supported_optimizers():\n","    return [x.__name__ for x in Optimizer.__subclasses__()]\n","\n","\n","class Optimizer:\n","    def __init__(self, params, lr):\n","        self.params = params\n","        self.lr = lr\n","\n","    def apply(self):\n","        raise NotImplementedError\n","\n","\n","class SGD(Optimizer, ABC):\n","    def __init__(self, params, lr):\n","        super(SGD, self).__init__(params, lr)\n","\n","    def apply(self):\n","        for param in self.params.values():\n","            param[\"W\"] -= self.lr * param[\"dW\"]\n","            param[\"b\"] -= self.lr * param[\"db\"]\n","\n","\n","class Momentum(Optimizer, ABC):\n","    def __init__(self, params, lr, mu):\n","        super(Momentum, self).__init__(params, lr)\n","        self.mu = mu\n","        for layer in list(self.params.values()):\n","            layer.update({\"gW\": np.zeros_like(layer[\"dW\"])})\n","            layer.update({\"gb\": np.zeros_like(layer[\"db\"])})\n","\n","    def apply(self):\n","        for param in self.params.values():\n","            param[\"gW\"] = param[\"dW\"] + self.mu * param[\"gW\"]\n","            param[\"W\"] -= self.lr * param[\"gW\"]\n","            param[\"gb\"] = param[\"db\"] + self.mu * param[\"gb\"]\n","            param[\"b\"] -= self.lr * param[\"gb\"]\n","\n","\n","class RMSProp(Optimizer, ABC):\n","    def __init__(self, params, lr=0.01, beta=0.99, eps=1e-8):\n","        super(RMSProp, self).__init__(params, lr)\n","        self.beta = beta\n","        self.eps = eps\n","        for layer in list(self.params.values()):\n","            layer.update({\"sW\": np.zeros_like(layer[\"dW\"])})\n","            layer.update({\"sb\": np.zeros_like(layer[\"db\"])})\n","\n","    def apply(self):\n","        for param in self.params.values():\n","            param[\"sW\"] = self.beta * param[\"sW\"] + (1 - self.beta) * np.square(param[\"dW\"])\n","            param[\"W\"] -= self.lr * param[\"dW\"] / (np.sqrt(param[\"sW\"]) + self.eps)\n","            param[\"sb\"] = self.beta * param[\"sb\"] + (1 - self.beta) * np.square(param[\"db\"])\n","            param[\"b\"] -= self.lr * param[\"db\"] / (np.sqrt(param[\"sb\"]) + self.eps)\n","\n","\n","class AdaGrad(Optimizer, ABC):\n","    def __init__(self, params, lr=0.01, eps=1e-8):\n","        super(AdaGrad, self).__init__(params, lr)\n","        self.eps = eps\n","        for layer in list(self.params.values()):\n","            layer.update({\"sW\": np.zeros_like(layer[\"dW\"])})\n","            layer.update({\"sb\": np.zeros_like(layer[\"db\"])})\n","\n","    def apply(self):\n","        for param in self.params.values():\n","            param[\"sW\"] = np.square(param[\"dW\"])\n","            param[\"W\"] -= self.lr * param[\"dW\"] / (np.sqrt(param[\"sW\"]) + self.eps)\n","            param[\"sb\"] = np.square(param[\"db\"])\n","            param[\"b\"] -= self.lr * param[\"db\"] / (np.sqrt(param[\"sb\"]) + self.eps)\n","\n","\n","# class Adam(Optimizer, ABC):\n","#     def __init__(self, params, lr=0.001, beta1=0.9, beta2=0.999, eps=1e-8):\n","#         super(Adam, self).__init__(params, lr)\n","#         self.beta1 = beta1\n","#         self.beta2 = beta2\n","#         self.eps = eps\n","#         self.k = 1\n","#         for layer in list(self.params.values()):\n","#             layer.update({\"mW\": np.zeros_like(layer[\"W\"])})  # Cập nhật kích thước cho mW\n","#             layer.update({\"vW\": np.zeros_like(layer[\"W\"])})  # Cập nhật kích thước cho vW\n","#             layer.update({\"mb\": np.zeros_like(layer[\"b\"])})  # Cập nhật kích thước cho mb\n","#             layer.update({\"vb\": np.zeros_like(layer[\"b\"])})  # Cập nhật kích thước cho vb\n","\n","#     def apply(self):\n","#         self.k += 1\n","#         for param in self.params.values():\n","#             param[\"mW\"] = (1 - self.beta1) * param[\"dW\"] + self.beta1 * param[\"mW\"]\n","#             param[\"vW\"] = (1 - self.beta2) * np.square(param[\"dW\"]) + self.beta2 * param[\"vW\"]\n","#             mw_hat = param[\"mW\"] / (1 - self.beta1 ** self.k)\n","#             vw_hat = param[\"vW\"] / (1 - self.beta2 ** self.k)\n","#             print(param[\"W\"].shape)\n","#             print(mw_hat.shape)\n","#             print(vw_hat.shape)\n","#             param[\"W\"] -= self.lr * mw_hat / (np.sqrt(vw_hat) + self.eps)\n","\n","#             param[\"mb\"] = (1 - self.beta1) * param[\"db\"] + self.beta1 * param[\"mb\"]\n","#             param[\"vb\"] = (1 - self.beta2) * np.square(param[\"db\"]) + self.beta2 * param[\"vb\"]\n","#             mb_hat = param[\"mb\"] / (1 - self.beta1 ** self.k)\n","#             vb_hat = param[\"vb\"] / (1 - self.beta2 ** self.k)\n","#             param[\"b\"] -= self.lr * mb_hat / (np.sqrt(vb_hat) + self.eps)\n","\n","class Adam(Optimizer, ABC):\n","    def __init__(self, params, lr=0.001, beta1=0.9, beta2=0.999, eps=1e-8):\n","        super(Adam, self).__init__(params, lr)\n","        self.beta1 = beta1\n","        self.beta2 = beta2\n","        self.eps = eps\n","        self.k = 1\n","        for layer in list(self.params.values()):\n","            layer.update({\"mW\": np.zeros_like(layer[\"dW\"])})\n","            layer.update({\"vW\": np.zeros_like(layer[\"dW\"])})\n","            layer.update({\"mb\": np.zeros_like(layer[\"db\"])})\n","            layer.update({\"vb\": np.zeros_like(layer[\"db\"])})\n","\n","    def apply(self):\n","        print(len(self.params.values()))\n","        for param in self.params.values():\n","            param[\"mW\"] = (1 - self.beta1) * param[\"dW\"] + self.beta1 * param[\"mW\"]\n","            param[\"vW\"] = (1 - self.beta2) * np.square(param[\"dW\"]) + self.beta2 * param[\"vW\"]\n","            mw_hat = param[\"mW\"] / (1 - self.beta1 ** self.k)\n","            vw_hat = param[\"vW\"] / (1 - self.beta2 ** self.k)\n","            print(param[\"W\"].shape)\n","            print(mw_hat.shape)\n","            print(vw_hat.shape)\n","            param[\"W\"] -= self.lr * mw_hat / (np.sqrt(vw_hat) + self.eps)\n","\n","            param[\"mb\"] = (1 - self.beta1) * param[\"db\"] + self.beta1 * param[\"mb\"]\n","            param[\"vb\"] = (1 - self.beta2) * np.square(param[\"db\"]) + self.beta2 * param[\"vb\"]\n","            mb_hat = param[\"mb\"] / (1 - self.beta1 ** self.k)\n","            vb_hat = param[\"vb\"] / (1 - self.beta2 ** self.k)\n","            param[\"b\"] -= self.lr * mb_hat / (np.sqrt(vb_hat) + self.eps)\n","        self.k += 1\n"],"metadata":{"id":"JcbgDPmO_w0d","executionInfo":{"status":"ok","timestamp":1711560555558,"user_tz":-420,"elapsed":326,"user":{"displayName":"Hoàng Phúc Nguyễn Văn","userId":"03015161690539755125"}}},"execution_count":25,"outputs":[]},{"cell_type":"code","source":["epochs=50\n","import random\n","np.random.seed(1)\n","mse = nn.losses.MSE()\n","# opt = SGD(model.parameters, lr=0.001)\n","opt = Adam(model.parameters, lr=0.1)\n","# opt = nn.optims.Adam(model.parameters)\n","loss_history = []\n","smoothed_loss = 0\n","for step in range(epochs):\n","    batch, target = [[None] for _ in range(batch_size)], [[None] for _ in range(batch_size)]\n","    for i in range(batch_size):\n","        idx = random.randint(0, len(x_train) - 1)\n","        batch[i] = x_train[idx]\n","        target[i] = y_train[idx]\n","    y_pred = model(batch)\n","    loss = mse(y_pred, target)\n","    model.backward(loss)\n","    opt.apply()\n","    if step == 0:\n","        smoothed_loss = loss.value\n","    else:\n","        smoothed_loss = 0.9 * smoothed_loss + 0.1 * loss.value\n","    loss_history.append(smoothed_loss)\n","    if step % 1 == 0:\n","        print(f\"Step: {step} | loss: {smoothed_loss}\")\n","        # print(\"Step: %i | loss: %.5f\" % (step, smoothed_loss))\n","\n","# plt.scatter(x, t, s=20)\n","# y = model.forward(x, eval=True)\n","# plt.plot(x, y, c=\"red\", lw=3)\n","# plt.show()\n","# plt.plot(np.arange(len(loss_history)), loss_history)\n","# plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0On5Yhhhwr1E","outputId":"57ec2ab9-c881-4e74-b568-355977ae8940"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["dense\n","dropout\n","dense\n","dropout\n","dropout\n","6\n","(27, 64)\n","(27, 64)\n","(27, 64)\n","(576, 64)\n","(576, 64)\n","(576, 64)\n","(576, 128)\n","(576, 128)\n","(576, 128)\n","(1152, 128)\n","(1152, 128)\n","(1152, 128)\n","(8192, 512)\n","(8192, 512)\n","(8192, 512)\n","(512, 10)\n","(512, 10)\n","(512, 10)\n","Step: 0 | loss: [7.40218803e+23 7.24677470e+23 6.94497564e+23 7.75665990e+23\n"," 7.76733613e+23 6.76929172e+23 7.07324495e+23 8.40477022e+23\n"," 6.85679339e+23 7.74833920e+23]\n","dense\n","dropout\n","dense\n","dropout\n","dropout\n","6\n","(27, 64)\n","(27, 64)\n","(27, 64)\n","(576, 64)\n","(576, 64)\n","(576, 64)\n","(576, 128)\n","(576, 128)\n","(576, 128)\n","(1152, 128)\n","(1152, 128)\n","(1152, 128)\n","(8192, 512)\n","(8192, 512)\n","(8192, 512)\n","(512, 10)\n","(512, 10)\n","(512, 10)\n","Step: 1 | loss: [6.66196923e+23 6.52209723e+23 6.25047808e+23 6.98099391e+23\n"," 6.99060251e+23 6.09236255e+23 6.36592045e+23 7.56429320e+23\n"," 6.17111405e+23 6.97350528e+23]\n","dense\n","dropout\n","dense\n","dropout\n","dropout\n","6\n","(27, 64)\n","(27, 64)\n","(27, 64)\n","(576, 64)\n","(576, 64)\n","(576, 64)\n","(576, 128)\n","(576, 128)\n","(576, 128)\n","(1152, 128)\n","(1152, 128)\n","(1152, 128)\n","(8192, 512)\n","(8192, 512)\n","(8192, 512)\n","(512, 10)\n","(512, 10)\n","(512, 10)\n","Step: 2 | loss: [5.99577231e+23 5.86988751e+23 5.62543027e+23 6.28289452e+23\n"," 6.29154226e+23 5.48312629e+23 5.72932841e+23 6.80786388e+23\n"," 5.55400264e+23 6.27615475e+23]\n","dense\n","dropout\n","dense\n","dropout\n","dropout\n","6\n","(27, 64)\n","(27, 64)\n","(27, 64)\n","(576, 64)\n","(576, 64)\n","(576, 64)\n","(576, 128)\n","(576, 128)\n","(576, 128)\n","(1152, 128)\n","(1152, 128)\n","(1152, 128)\n","(8192, 512)\n","(8192, 512)\n","(8192, 512)\n","(512, 10)\n","(512, 10)\n","(512, 10)\n","Step: 3 | loss: [5.39619507e+23 5.28289876e+23 5.06288724e+23 5.65460506e+23\n"," 5.66238804e+23 4.93481366e+23 5.15639557e+23 6.12707749e+23\n"," 4.99860238e+23 5.64853928e+23]\n","dense\n","dropout\n","dense\n","dropout\n","dropout\n","6\n","(27, 64)\n","(27, 64)\n","(27, 64)\n","(576, 64)\n","(576, 64)\n","(576, 64)\n","(576, 128)\n","(576, 128)\n","(576, 128)\n","(1152, 128)\n","(1152, 128)\n","(1152, 128)\n","(8192, 512)\n","(8192, 512)\n","(8192, 512)\n","(512, 10)\n","(512, 10)\n","(512, 10)\n","Step: 4 | loss: [4.85657557e+23 4.75460888e+23 4.55659852e+23 5.08914456e+23\n"," 5.09614923e+23 4.44133230e+23 4.64075601e+23 5.51436974e+23\n"," 4.49874214e+23 5.08368535e+23]\n","dense\n","dropout\n","dense\n","dropout\n","dropout\n","6\n","(27, 64)\n","(27, 64)\n","(27, 64)\n","(576, 64)\n","(576, 64)\n","(576, 64)\n","(576, 128)\n","(576, 128)\n","(576, 128)\n","(1152, 128)\n","(1152, 128)\n","(1152, 128)\n","(8192, 512)\n","(8192, 512)\n","(8192, 512)\n","(512, 10)\n","(512, 10)\n","(512, 10)\n","Step: 5 | loss: [4.37091801e+23 4.27914799e+23 4.10093867e+23 4.58023010e+23\n"," 4.58653431e+23 3.99719907e+23 4.17668041e+23 4.96293277e+23\n"," 4.04886793e+23 4.57531681e+23]\n","dense\n","dropout\n","dense\n","dropout\n","dropout\n","6\n","(27, 64)\n","(27, 64)\n","(27, 64)\n","(576, 64)\n","(576, 64)\n","(576, 64)\n","(576, 128)\n","(576, 128)\n","(576, 128)\n","(1152, 128)\n","(1152, 128)\n","(1152, 128)\n","(8192, 512)\n","(8192, 512)\n","(8192, 512)\n","(512, 10)\n","(512, 10)\n","(512, 10)\n","Step: 6 | loss: [3.93382621e+23 3.85123319e+23 3.69084480e+23 4.12220709e+23\n"," 4.12788088e+23 3.59747916e+23 3.75901237e+23 4.46663949e+23\n"," 3.64398114e+23 4.11778513e+23]\n","dense\n","dropout\n","dense\n","dropout\n","dropout\n","6\n","(27, 64)\n","(27, 64)\n","(27, 64)\n","(576, 64)\n","(576, 64)\n","(576, 64)\n","(576, 128)\n","(576, 128)\n","(576, 128)\n","(1152, 128)\n","(1152, 128)\n","(1152, 128)\n","(8192, 512)\n","(8192, 512)\n","(8192, 512)\n","(512, 10)\n","(512, 10)\n","(512, 10)\n","Step: 7 | loss: [3.54044359e+23 3.46610987e+23 3.32176032e+23 3.70998638e+23\n"," 3.71509279e+23 3.23773124e+23 3.38311113e+23 4.01997554e+23\n"," 3.27958302e+23 3.70600662e+23]\n","dense\n","dropout\n","dense\n","dropout\n","dropout\n"]}]},{"cell_type":"markdown","source":["<h1 style=\"font-size:50px;color:#6166B3\"><strong>Evaluating </strong><strong style=\"color:black\">The Model:</strong></h1>"],"metadata":{"id":"yfBpnOqlZdNF"}},{"cell_type":"code","source":["# Plotting the Model Accuracy & Model Loss vs Epochs (Hidden Input)\n","plt.figure(figsize=[20,8])\n","\n","# summarize history for accuracy\n","plt.subplot(1,2,1)\n","plt.plot(history.history['accuracy'])\n","plt.plot(history.history['val_accuracy'])\n","plt.title('Model Accuracy', size=25, pad=20)\n","plt.ylabel('Accuracy', size=15)\n","plt.xlabel('Epoch', size=15)\n","plt.legend(['train', 'test'], loc='upper left')\n","# summarize history for loss\n","\n","plt.subplot(1,2,2)\n","plt.plot(history.history['loss'])\n","plt.plot(history.history['val_loss'])\n","plt.title('Model Loss', size=25, pad=20)\n","plt.ylabel('Loss', size=15)\n","plt.xlabel('Epoch', size=15)\n","plt.legend(['train', 'test'], loc='upper left')\n","plt.show()"],"metadata":{"_kg_hide-input":true,"execution":{"iopub.status.busy":"2023-01-07T13:45:53.657455Z","iopub.execute_input":"2023-01-07T13:45:53.658106Z","iopub.status.idle":"2023-01-07T13:45:54.031695Z","shell.execute_reply.started":"2023-01-07T13:45:53.658071Z","shell.execute_reply":"2023-01-07T13:45:54.030976Z"},"trusted":true,"id":"fsCu0jvqZdNF"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["<h1 style=\"font-size:50px;color:#6166B3\"><strong>Predictions </strong><strong style=\"color:black\">Using The CNN Model:</strong></h1>"],"metadata":{"id":"dNHjmBqhZdNF"}},{"cell_type":"code","source":["# Checking the predictions! (Hidden Input)\n","predictions = model.predict(x_test)\n","\n","plt.figure(figsize=[10,10])\n","\n","class_names = ['airplane','automobile','bird','cat','deer','dog','frog','horse','ship','truck']\n","\n","plt.subplot(2,2,1)\n","n = 3\n","plt.imshow(x_test[n].reshape(32, 32, -1), cmap=plt.cm.binary)\n","plt.title(\"Predicted value: \" + str(class_names[np.argmax(predictions[n], axis=0)]), size=20)\n","plt.grid(False)\n","\n","plt.subplot(2,2,2)\n","n = 4\n","plt.imshow(x_test[n].reshape(32, 32, -1), cmap=plt.cm.binary)\n","plt.title(\"Predicted value: \" + str(class_names[np.argmax(predictions[n], axis=0)]), size=20)\n","plt.grid(False)\n","\n","plt.subplot(2,2,3)\n","n = 8\n","plt.imshow(x_test[n].reshape(32, 32, -1), cmap=plt.cm.binary)\n","plt.title(\"Predicted value: \" + str(class_names[np.argmax(predictions[n], axis=0)]), size=20)\n","plt.grid(False)\n","\n","plt.subplot(2,2,4)\n","n = 6\n","plt.imshow(x_test[n].reshape(32, 32, -1), cmap=plt.cm.binary)\n","plt.title(\"Predicted value: \" + str(class_names[np.argmax(predictions[n], axis=0)]), size=20)\n","plt.grid(False)\n","\n","plt.suptitle(\"Predictions of CIFAR-10 Data\", size=30, color=\"#6166B3\")\n","\n","plt.show()"],"metadata":{"_kg_hide-input":true,"execution":{"iopub.status.busy":"2023-01-07T13:46:01.415246Z","iopub.execute_input":"2023-01-07T13:46:01.415508Z","iopub.status.idle":"2023-01-07T13:46:03.296341Z","shell.execute_reply.started":"2023-01-07T13:46:01.415479Z","shell.execute_reply":"2023-01-07T13:46:03.295672Z"},"trusted":true,"id":"x9h1SFoZZdNG"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["<h1 style=\"font-size:30px;color:#6166B3;text-align:center\"><strong style=\"color:black\">Leave an Upvote👍 if you Like/Fork my work. It will help me Grow</strong></h1>"],"metadata":{"id":"9YjnAG2hZdNG"}}]}